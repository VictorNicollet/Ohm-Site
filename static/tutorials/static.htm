<h3>Why static pages</h3>

<p>Static pages are the easiest way to get HTML displayed on a visitor's screen, but this comes at the cost of making it harder to use dynamic content on these pages, including variables coming from the database or internationalization.</p>

<p>The typical use cases for static pages are:</p>

<ul>
  <li>A landing page built using custom HTML.</li>
  <li>This tutorial.</li>
  <li>A blog entry on a developer's personal web site.</li>
  <li>The <i>Terms and Conditions</i> page.</li>
</ul>

<p>While the heart of a static page is a large block of HTML, you are allowed to make the surrounding HTML dynamic. This includes rendering links to the previous or next article, or manipulating a comments feed below an article.</p>

<hr/>

<h3>Enabling static pages</h3>

<p>To publish static pages, you need to install the corresponding plugin. Run this command in the root directory of your project:</p>

<pre>ohm plug ohmStatic</pre>

<p>The plugin should now be enabled. Next, create a <code>/static</code> directory in the root directory of your project, and add an <code>index.htm</code> file there: </p>

<pre><div class="src">/static/index.htm</div>&lt;p>Hello, world&nbsp;!&lt;/p></pre>

<p>Many ohm plugins have a <abbr title="Do What I Mean">DWIM</abbr> running mode which is executed for all enabled plugins when the project build process begins. The DWIM mode of the <em>ohmStatic</em> plugin recursively explores the <code>/static</code> directory in the project root, and turns any files found inside into either pages (for the <em>.htm</em>, <em>.html</em> and <em>.md</em> extensions) or downloadable files (any other extensions). </p>

<hr/>

<h3>Displaying static pages</h3>

<p>The ohmStatic plugin build step turns your static pages into assets, but does not display them. You now need to write a short bit of OCaml code to do so:</p>

<pre><div class="src">ocaml/cStatic.ml</div><{ocaml:OhmStatic.export 
  ~server:  O.server 
  ~title:   "My Example Page"
  Static.site}></pre>

<pre><div class="src">ocaml/cStatic.mli</div><{ocaml:(* Empty file *)}></pre>

<pre><div class="src">ocaml/main.ml</div><span class="light">module Controllers = struct
  open CErrorPage</span>
<{ocaml:  open CStatic}>
<span class="light">end</span></pre>

<p>These additions will do the following:</p>

<ul>
  <li>In a brand new controller file <code>cStatic.ml</code>, export the site (available as <code>Static.site</code>) on the default server <code>O.server</code> using &laquo;&nbsp;My Example Page&nbsp;&raquo; as the default title for each page.</li>
  <li>Provide an empty interface file <code>cStatic.mli</code> to improve compiling time: you may change the implementation file as often as you want, files that depend on that implementation file will not have ot be re-built as long as the interface file remains unchanged. </li>
  <li>Add <code>open CStatic</code> to the list of controllers in <code>main.ml</code> so that the application will include the code that was just written.</li>
</ul>

<p>Once this is done, run <code>make</code> in the project root, and visit <a href="http://ice-cream.local">http://ice-cream.local</a> in your web browser to see the new static page appear (you may need to refresh your page before it appears).</p>

<hr/>

<h3>URL mapping</h3>

<p>The ohmStatic plugin maps URLs to static pages or files. For instance, it mapped a <code>GET /</code> request to the <code>/static/index.htm</code> file. In practice, the mapping is expressed the other way around: based on the relative path of the static page, the plugin determines the corresponding URL. The default rules are as follows:</p>

<ul>
  <li>If the file ends with <code>.htm</code>, <code>.html</code> or <code>.md</code>, remove that prefix.</li>
  <li>Then, if the file name is <code>index</code>, remove the file name altogether.</li>
</ul>

<p>For instance: 
<br/><code>/aaa/bbb.txt</code> remains unchanged, 
<br/><code>/aaa/bbb.htm</code> is mapped to <code>/aaa/bbb</code> and
<br/><code>aaa/index.htm</code> is mapped to <code>aaa</code>. </p>

<p>In case of collisions, the behavior is undefined and possibly non-deterministic.</p>

<p>The type of a renaming procedure, as well as the default procedure, are defined by the ohmStatic plugin:</p>

<pre><div class="src">/.ohm/Ohm-Plugins/ohmStatic/ohmStatic.mli</div><{ocaml:type key = string
type renaming = key -> string

val canonical : renaming}></pre>

<p>You are allowed to define your own rules instead (or in addition to) the default rules. For instance, if you wish for all the pages (except the index) to have a <code>site</code> prefix:</p>

<pre><div class="src">/ocaml/cStatic.ml</div><{ocaml:let rename = function 
  | "index.htm" -> ""
  | other -> "site/" ^ OhmStatic.canonical other

let _ = OhmStatic.export
  ~rename
  ~server:  O.server  
  ~title:   "My Example Page"
  Static.site}></pre>

<hr/>

<h3>Page links</h3>

<p>You will need to link from page <code>a.htm</code> to page <code>b.htm</code>, but since static page URLs are generated by a renaming procedure that is subject to change, it's a bad idea to hard-code those URLs by hand.</p>

<p>Fortunately, the ohmStatic plugin provides a way of generating the URL from the intended path at runtime based on the renaming procedure:</p>

<pre><div class="src">/static/a.htm</div>&lt;a href="&lt;{url:b.htm}&gt;">Click here&lt;/a></pre>

<p>At runtime, the <code>&lt;{url:b.htm}&gt;</code> token will be replaced by the actual URL of the <code>b.htm</code> static page.</p>

<hr/>

<div class="prev-page">
  Back to : <a href="<{url:tutorials/files.htm}>">Project Files</a>
</div>

