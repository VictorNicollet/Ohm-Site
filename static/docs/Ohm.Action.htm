<div class="docs">
  
<h2 class="-docs">module <a href="<{url:docs/index.htm}>">Ohm</a>.<strong>Action</strong></h2>

<p>
  This module represents several concepts related to the HTTP request-response cycle, and 
  provides functions to work with these concepts.
</p>

<ul>
  <li><a href="#action">Actions</a> are functions triggered by incoming HTTP requests.</li>
  <li><a href="#request">Requests</a> represent all the data received by the server during an HTTP request.</li>
  <li><a href="#response">Responses</a> are built by the application and sent back to the client.</li>
  <li><a href="#server">Servers</a> let you handle several domains from within a single application.</li>
  <li><a href="#endpoint">Endpoints</a> turn registered actions into actual URLs.</li>
  <li><a href="#convenience">Convenience</a> functions are generally helpful.</li>
</ul>

<h3><a name="action"></a>Actions</h3>

<p>
  An action is a function that describes how to handle an incoming HTTP request. Actions implement type <a href="<{url:docs/Ohm.Action.t.htm}>"><code>Action.t</code></a> : they receive a <a href="#request">request</a> object and a default <a href="#response">response</a> as a parameter, and they return an <a href="<{url:docs/index.htm}>">run-box</a> that evaluates to a response. 
</p>

<div class="example">
  <p><b>Example</b>: an action that returns the JSON object <code>{ok:true}</code>.</p>
  
  <pre><{ocaml:open Ohm
open Ohm.Universal

fun request response -> 
  return (Action.json ["ok", Json.Bool true] response)}></pre>
</div>

<p>
  When the application runs in web server mode, it must decide what action should handle each HTTP request, and it does so by using the dispatcher built into the Ohm framework. Actions are added to the dispatcher using the <a href="<{url:docs/Ohm.Action.register.htm}>"><code>register</code></a> or <a href="<{url:docs/Ohm.Action.declare.htm}>"><code>declare</code></a> functions. 
</p>

<div class="example">
  <p><b>Example</b>: registering an action on the default server <a href="#servers"><code>O.server</code></a> with path <code>foo/bar</code> and no arguments.</p>

  <pre><{ocaml:open Ohm
open Ohm.Universal 

let _ = Action.register O.server "foo/bar" Action.Args.none
  (fun req res -> return (Action.json ["ok", Json.Bool true] res))}></pre>

  <pre>http://example.com/foo/bar <span class="comment">==&gt; {ok:true,code:[]}</span>
</div>

<p>
  Actions may expect arguments, which are provided by the client as part of the URL. This process is detailed in the documentation for module <a href="<{url:docs/Ohm.Action.Args.htm}>"><code>Action.Args</code></a>.
</p>

<div class="example">
  <p><b>Example</b>: define an action which expects an optional floating-point argument, and returns a JSON value that includes the provided argument.</p>
  
  <pre><{ocaml:open Ohm
open Ohm.Universal

let _ = Action.register O.server "test" Action.Args.(o float) 
  (fun req res -> 
     let value = Json.of_opt Json.of_float (req # args) in
     return (Action.json ["value", value] res))}></pre>

  <pre>http://example.com/test     <span class="comment">==&gt; {value:null,code:[]}</span>
http://example.com/test/1.5 <span class="comment">==&gt; {value:1.5,code:[]}</span></pre>
</div>

<p>
  The dispatcher follows these rules when determining what action to use: 
</p>

<ol>
  <li><p>Eliminate all actions where the server does not match the domain and protocol of the incoming HTTP request.</p></li>
  <li><p>Eliminate all actions where the (path + args) does not match the entire URL of the HTTP request.</p></li>
  <li><p>If there are no actions left, use the action registered with <a href="<{url:docs/Ohm.Action.register_404.htm}>"><code>register_404</code></a> or raise <a href="<{url:docs/Ohm.Action.Action_not_found.htm}>"><code>Action_not_found</code></a></p></li>
  <li><p>Return the action with the longest path.</p></li>
</ol>

<p>If two actions are registered for <code>/test/admin</code> and <code>/test/[string]</code>, then a request with URL <code>/test/admin</code> will be mapped to action 1 even though both actions would match it.
</p>

<h3><a name="request"></a>Requests</h3>

<p>When an HTTP request is received, an object representing that request is passed to the triggered <a href="#action">action</a>. Request objects implement the class type <a href="<{url:docs/Ohm.Action.request.htm}>"><code>Action.request</code></a> 

<h3><a name="response"></a>Responses</h3>

<p>The ultimate objective of an action is to construct an HTTP response that will be sent back to the client. To do so, it manipulates a response that is "under construction", represented by abstract immutable type <code>Action.response</code>.</p>

<p>The action receives a default HTTP response as a parameter. This is usually an empty JSON response, so returning it straight away will send <code>{code:[]}</code> to the client.</p>

<p>Use the following functions to transform the response object into what you want it to be:</p>

<ul>
  <li><a href="<{url:docs/Ohm.Action.page.htm}>"><code>Action.page</code></a> responds with an HTML page.</li>
  <li><a href="<{url:docs/Ohm.Action.json.htm}>"><code>Action.json</code></a> responds with some JSON.</li>
  <li><a href="<{url:docs/Ohm.Action.jsonp.htm}>"><code>Action.jsonp</code></a> responds using the JSONP protocol.</li>
  <li><a href="<{url:docs/Ohm.Action.redirect.htm}>"><code>Action.redirect</code></a> responds with a 303 See Other.</li>
  <li><a href="<{url:docs/Ohm.Action.file.htm}>"><code>Action.file</code></a> responds with a downloadable file.</li>
  <li><a href="<{url:docs/Ohm.Action.javascript.htm}>"><code>Action.javascript</code></a> adds some JS code to the response.</li>
  <li><a href="<{url:docs/Ohm.Action.with_cookie.htm}>"><code>Action.with_cookie</code></a> adds a cookie to the response.</li>
</ul>

<h3><a name="server"></a>Servers</h3>

<p>A typical web application may have to handle several domain names over both HTTP and HTTPS. Action servers help restrict actions to specific domains, ports and protocols.</p>

<p>Action servers implement the <a href="<{url:docs/Ohm.Action.server.htm}>"><code>Action.server</code></a> class type. Typical Ohm projects include a default server <code>O.server</code> that matches HTTP requests on port 80 for the project's domain name. If you need more complex behavior, see the <a href="#convenience">convenience functions</a> below for simple ways of defining servers.</p>

<h3><a name="endpoint"></a>Endpoints</h3>

<p>Endpoints are simple, type-safe ways of creating URLs that will be mapped to specific registered actions. In particular, endpoints let you specify the server instance and the request arguments contained in the HTTP request received by the target actions.</p>

<p>Endpoints are represented by abstract type <code>Action.endpoint</code>. They are returned by the action registration functions <a href="<{url:docs/Ohm.Action.register.htm}>"><code>register</code></a> and <a href="<{url:docs/Ohm.Action.declare.htm}>"><code>declare</code></a>.</p>

<p>Use function <a href="<{url:docs/Ohm.Action.url.htm}>"><code>Action.url</code></a> to create an URL from an endpoint.</p>

<div class="example">
  <p><b>Example</b>: consider an action which takes a string parameter representing an URL, and redirects the client to that URL. How might we construct an URL which points to that action such that we are redirected to <code>http://ohm-framework.com</code> ?</p>

  <pre><{ocaml:open Ohm
open Ohm.Universal

let redirect req res = 
  return (Action.redirect (req # args) res) 

let endpoint = 
  Action.register O.server "r" Action.Args.(r string) redirect

let url = 
  Action.url endpoint () "http://ohm-framework.com"

(* Assuming the domain for O.server is ice-cream.local : *)
val url : string = "http://ice-cream.local/r/http%3A%2F%2Fohm-framework.com"}></pre>

</div>

<h3><a name="convenience"></a>Convenience</h3>

<p>Convenience functions help with redundant aspects of action manipulation. They are defined in module <a href="<{url:docs/Ohm.Action.Convenience.htm}>"><code>Action.Convenience</code></a> 

</div>
